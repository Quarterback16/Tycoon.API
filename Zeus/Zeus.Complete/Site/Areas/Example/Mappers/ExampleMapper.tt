<#@ template debug="false" hostspecific="false" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="%ESG_SDK%\Tools\Employment.TextTemplating.dll" #>
<#@ import namespace="Employment.TextTemplating" #>
<# // Import the assemblies and namespaces for the types you are generating mappings for. #> 
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\Site\bin\Employment.Web.Mvc.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\Site\bin\Employment.Web.Mvc.Area.Example.dll" #>
<#@ assembly name="$(SolutionDir)\Site\bin\Employment.Web.Mvc.Service.Interfaces.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Employment.Web.Mvc.Area.Example.Models" #>
<#@ import namespace="Employment.Web.Mvc.Area.Example.Service.Interfaces" #>
<#@ import namespace="Employment.Web.Mvc.Area.Example.ViewModels" #>
<#@ import namespace="Employment.Web.Mvc.Area.Example.ViewModels.Grid" #>
<#@ import namespace="Employment.Web.Mvc.Area.Example.ViewModels.PagedGrid" #>
<#@ import namespace="Employment.Web.Mvc.Area.Example.ViewModels.Workflow" #>
<#@ import namespace="Employment.Web.Mvc.Infrastructure.Types" #>
<#@ import namespace="Employment.Web.Mvc.Infrastructure.ValueResolvers" #> 
<#@ import namespace="System.Security.Claims" #> 
<#@ import namespace="Employment.Web.Mvc.Infrastructure.Models.JobSeeker" #> 
<#@ import namespace="System" #> 
<#@ import namespace="Employment.Web.Mvc.Infrastructure.ViewModels.JobSeeker"#> 
/*
Generated code. Do not edit manually.
Example Mapper.cs
*/
using Employment.Web.Mvc.Area.Example.ViewModels.PagedGrid;
using Employment.Web.Mvc.Area.Example.ViewModels.Workflow;
using Employment.Web.Mvc.Area.Example.ViewModels.Grid;
using Employment.Web.Mvc.Infrastructure.Types;
using Employment.Web.Mvc.Infrastructure.ValueResolvers;
using System.Security.Claims;
using Employment.Web.Mvc.Infrastructure.Models.JobSeeker;
using System;
using Employment.Web.Mvc.Infrastructure.ViewModels.JobSeeker; 
using Employment.Web.Mvc.Area.Example.Models;
using Employment.Web.Mvc.Area.Example.Service.Interfaces;


namespace Employment.Web.Mvc.Area.Example.Mappers
{

<#
var jobSeekerSearchModelToJobSeekerModelListMapping = new StaticMapping<JobSeekerSearchModel, JobSeekerModelList>();
jobSeekerSearchModelToJobSeekerModelListMapping.IgnoreMember("DOB");
jobSeekerSearchModelToJobSeekerModelListMapping.IgnoreMember("Id");

var jobseekerSearchViewModelToJobSeekerSearchModel = new StaticMapping<JobseekerSearchViewModel, JobSeekerSearchModel>();
jobseekerSearchViewModelToJobSeekerSearchModel.IgnoreMember("Id");
jobseekerSearchViewModelToJobSeekerSearchModel.IgnoreMember("DOB");

var dummiesAllPageMetadataToDummiesAllViewModel = new StaticMapping<DummiesAllPageMetadata, DummiesAllViewModel>();
var dummiesAllViewModelToDummiesAllPageMetadata = new StaticMapping<DummiesAllViewModel, DummiesAllPageMetadata>();

var sortingGridMetadataToSortingViewModel = new StaticMapping<SortingGridMetadata, SortingViewModel>();
var sortModelToSortModel = new StaticMapping<SortModel, SortModel>();
var sortingViewModelToSortingGridMetadata = new StaticMapping<SortingViewModel, SortingGridMetadata>();
var gridSortingViewModelToGridSortingViewModel = new StaticMapping<SortModel, GridSortingViewModel>();

var dummiesMainframeViewModelToDummiesMainframePageMetadata = new StaticMapping<DummiesMainframeViewModel, DummiesMainframePageMetadata>();
var dummiesModelToDummiesMainframePageMetadata = new StaticMapping<DummiesModel, DummiesMainframePageMetadata>();


var dummyModelToDummyViewModel = new StaticMapping<DummyModel, DummyViewModel>();
dummyModelToDummyViewModel.IgnoreMember("DateTime");
var claimToClaimViewModel = new StaticMapping<Claim, ClaimViewModel>();
var claimToClaimWithButtonsViewModel = new StaticMapping<Claim, ClaimWithButtonsViewModel>();
claimToClaimWithButtonsViewModel.IgnoreMember("HashKey");

var claimWithButtonsViewModelToButtonEditViewModel = new StaticMapping<ClaimWithButtonsViewModel, ButtonEditViewModel>();
claimWithButtonsViewModelToButtonEditViewModel.IgnoreMember("HashKey");

var claimToButtonEditViewModel = new StaticMapping<Claim, ButtonEditViewModel>();
claimToButtonEditViewModel.IgnoreMember("HashKey");

var step1ViewModelToStep3ViewModel = new StaticMapping<Step1ViewModel, Step3ViewModel>();
var step2ViewModelToStep3ViewModel = new StaticMapping<Step2ViewModel, Step3ViewModel>();
var step2AlternativeViewModelToStep3ViewModel = new StaticMapping<Step2AlternativeViewModel, Step3ViewModel>();

 

#>
	
	/// <summary>
    /// Represents a mapper that is used to map between View Models and Domain Models.
    /// </summary>
	public partial class ExampleMapper 
	{

		<#= jobSeekerSearchModelToJobSeekerModelListMapping.MapNewMethod() #> 
		<#= jobSeekerSearchModelToJobSeekerModelListMapping.BeginMapExistingMethod() #> 
			target.DOB = ParseToDateTime(source.DOB);
			target.Id = ParseToLong(source.Id);
		<#= jobSeekerSearchModelToJobSeekerModelListMapping.EndMapExistingMethod() #> 

		<#= jobseekerSearchViewModelToJobSeekerSearchModel.MapNewMethod() #>
		<#= jobseekerSearchViewModelToJobSeekerSearchModel.BeginMapExistingMethod() #>
			target.DOB = source.DOB.HasValue ? source.DOB.Value.ToString() : string.Empty;
			target.Id = source.Id.HasValue ? source.Id.Value.ToString() : string.Empty;
		<#= jobseekerSearchViewModelToJobSeekerSearchModel.EndMapExistingMethod() #>

		<#= dummiesAllPageMetadataToDummiesAllViewModel.GenerateMapping() #>
		<#= dummiesAllViewModelToDummiesAllPageMetadata.GenerateMapping() #>

#region SORTING Mapping		
		<#= sortingGridMetadataToSortingViewModel.GenerateMapping() #>
		<#= sortModelToSortModel.GenerateMapping() #>
		<#= sortingViewModelToSortingGridMetadata.GenerateMapping() #>
		<#= gridSortingViewModelToGridSortingViewModel.GenerateMapping() #>
#endregion

		<#= dummiesMainframeViewModelToDummiesMainframePageMetadata.GenerateMapping() #>
		<#= dummiesModelToDummiesMainframePageMetadata.GenerateMapping() #>
		 

		<#= dummyModelToDummyViewModel.BeginMapExistingMethod() #>
			target.DateTime = source.DateTime ?? DateTime.MinValue;
		<#= dummyModelToDummyViewModel.EndMapExistingMethod() #>

		<#= claimToClaimViewModel.GenerateMapping() #>
		
		<#= claimToClaimWithButtonsViewModel.BeginMapExistingMethod() #>
			target.HashKey = source.GetHashCode().ToString();
		<#= claimToClaimWithButtonsViewModel.EndMapExistingMethod() #>

		<#= claimWithButtonsViewModelToButtonEditViewModel.BeginMapExistingMethod() #>
			target.HashKey = source.GetHashCode().ToString();
		<#= claimWithButtonsViewModelToButtonEditViewModel.EndMapExistingMethod() #>


		<#= claimToButtonEditViewModel.BeginMapExistingMethod() #>
			target.HashKey = source.GetHashCode().ToString();
		<#= claimToButtonEditViewModel.EndMapExistingMethod() #>


		<#= step1ViewModelToStep3ViewModel.GenerateMapping() #>
		<#= step2ViewModelToStep3ViewModel.GenerateMapping() #>
		<#= step2AlternativeViewModelToStep3ViewModel.MapNewMethod() #>
		<#= step2AlternativeViewModelToStep3ViewModel.BeginMapExistingMethod() #>
		<#= step2AlternativeViewModelToStep3ViewModel.EndMapExistingMethod() #>
	
	}



	
}