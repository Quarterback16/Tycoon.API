///////////////////////////////////////////////////////////
//  SimpleTableReport.cs
//  Implementation of the Class SimpleTableReport
//  Generated by Enterprise Architect
//  Created on:      25-Jul-2005 17:19:14
//  Original author: Steve Colonna
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
//using Excel = Microsoft.Office.Interop.Excel;


namespace RosterLib
{
	public class SimpleTableReport
	{
		private readonly string _header;

		/// <summary>
		/// DataRows to be reported on.
		/// </summary>
		private DataTable _body;

		private readonly DataColumnCollection _cols;
		private readonly string _footer;
		private readonly ArrayList _columns;

		private bool _rowNumbers;
		private bool _showElapTime = true;
		private bool _carryRow = true;
		private bool _isfooter = true;

		private string _timeTaken = "";
		private string _subHeader = "";

		private readonly ElapsedTimer _et;

		public bool AnnounceIt { get; set; }

		#region  CONSTRUCTORS

		public SimpleTableReport()
		{
			_columns = new ArrayList();
			_et = new ElapsedTimer();
			_et.Start(DateTime.Now);
			StyleList = new ArrayList();
			_body = new DataTable();
			_cols = Body.Columns;
			AnnounceIt = true;
		}

		/// <summary>
		///   Report with a header and a footer
		/// </summary>
		/// <param name="header"></param>
		/// <param name="footer"></param>
		public SimpleTableReport(string header, string footer)
		{
			ReportHeader = header;
			ReportFooter = footer;
			_columns = new ArrayList();
			_et = new ElapsedTimer();
			_et.Start(DateTime.Now);
			StyleList = new ArrayList();
			_body = new DataTable();
			_cols = Body.Columns;
			SubHeader = string.Empty;
		}

		/// <summary>
		///   No footer
		/// </summary>
		/// <param name="header"></param>
		public SimpleTableReport(string header)
		{
			_header = header;
			_footer = String.Empty;
			_columns = new ArrayList();
			_et = new ElapsedTimer();
			_et.Start(DateTime.Now);
			StyleList = new ArrayList();
			_body = new DataTable();
			_cols = _body.Columns;
			SubHeader = string.Empty;

			//RosterLib.Utility.Announce(string.Format("SimpleTableReport {0} created", header ));
		}

		#endregion

		#region   Accessors

		public string TimeTaken
		{
			get { return _timeTaken; }
			set { _timeTaken = value; }
		}

		public bool ShowElapsedTime
		{
			get { return _showElapTime; }
			set { _showElapTime = value; }
		}

		public bool CarryRow
		{
			get { return _carryRow; }
			set { _carryRow = value; }
		}

		public bool DoRowNumbers
		{
			get { return _rowNumbers; }
			set { _rowNumbers = value; }
		}

		public bool ColumnHeadings { get; set; }

		public string ReportHeader { get; set; }

		public string ReportFooter { get; set; }

		public bool Totals { get; set; }

		public int LastTotal { get; set; }

		public string SubHeader
		{
			get { return _subHeader; }
			set { _subHeader = value; }
		}

		public ArrayList StyleList { get; set; }

		public bool IsFooter
		{
			get { return _isfooter; }
			set { _isfooter = value; }
		}

		/// <summary>
		/// DataRows to be reported on.
		/// </summary>
		public DataTable Body
		{
			get { return _body; }
			set { _body = value; }
		}

		#endregion

		#region  Output

		#region  HTML Rendition

		/// <summary>
		///   Express the report in HTML. 
		/// </summary>
		/// <param name="fileName">The output DOS file fame.  Include a directory.</param>
		/// <param name="persist">Whether to delete the file or not, sometimes we just want the string.</param>
		public string RenderAsHtml(string fileName, bool persist)
		{
         if (ReportHeader == null) ReportHeader = _header;
         ReportHeader = string.Format("{0} as of {1}", ReportHeader, DateTime.Now.ToString("dd MMM yy HH:MM tt") );
			var h = new HtmlFile( fileName, ReportHeader );
			h.AnnounceIt = AnnounceIt;
			AddStyles(h);
			var html = string.Format("<h3>{0}</h3>", ReportHeader) + Header(_header);
			if (SubHeader.Length > 0) html += SubHeader;
			html += BodyOut();
			h.AddToBody(html);
			_et.Stop(DateTime.Now);
			TimeTaken = _et.TimeOut();
			h.AddToBody(IsFooter ? ReportFooter : Footer());
			if (persist) h.Render();
			return html;
		}

		private void AddStyles(HtmlFile h)
		{
			var styleEnumerator = StyleList.GetEnumerator();
			while (styleEnumerator.MoveNext())
				h.AddStyle(styleEnumerator.Current.ToString());
		}

		public void LoadBody(DataTable data)
		{
			Body = data;
		}

		public void SetFilter(string filt)
		{
			Body.DefaultView.RowFilter = filt;
		}

		public void SetSortOrder(string order)
		{
			Body.DefaultView.Sort = order;
		}

		public void AddColumn(ReportColumn c)
		{
			_columns.Add(c);

			if (c.Type != null)
				_cols.Add(c.Source, c.Type);
		}

		public void AddStyle(string style)
		{
			StyleList.Add(style);
		}

		public string BodyOut()
		{
			var rowCount = 0;
			var bBlank = false;
			var tot = new int[_columns.Count];
			for (var i = 0; i < _columns.Count; i++)
				tot[i] = 0;

			var sLastData = "";
			var s = "";

			if (Body != null)
			{
				s += HtmlLib.TableOpen("border=1 cellpadding='3' cellspacing='3'");
				s += ColHeaders();
				//  now just add a series of rows for each record
				for (var j = 0; j < Body.DefaultView.Count; j++)
				{
					rowCount++;
					if (IsEven(rowCount))
						s += HtmlLib.TableRowOpen("BGCOLOR='MOCCASIN'");
					else
						s += HtmlLib.TableRowOpen();

					if (DoRowNumbers)
						s += HtmlLib.TableDataAttr(rowCount.ToString(), "ALIGN='RIGHT' VALIGN='TOP'");

					//  plug in the data for each column defined
					for (var i = 0; i < _columns.Count; i++)
					{
						var col = (ReportColumn) _columns[i];
						var dc = Body.Columns[col.Source];

						var sVal = Body.DefaultView[j][col.Source].ToString();
						var sData = FormatData(dc, col.Format, sVal);

						if (col.CanAccumulate)
						{
							Totals = true;
							if (sVal.Length > 0) tot[i] += QuantityOf( sVal );
						}

						if (i == 0)
						{
							if (sData == sLastData)
								bBlank = true;
							else
							{
								sLastData = sData;
								bBlank = false;
							}
						}
						if (i > 5) bBlank = false;
						if (bBlank && ! CarryRow) sData = " ";
						if (col.BackGroundColourDelegateFromRole != null)
							s += HtmlLib.TableDataAttr(sData, AttrFor(dc, col.BackGroundColourDelegateFromRole, sVal));
						else
							s += HtmlLib.TableDataAttr(sData, AttrFor(dc, col.BackGroundColourDelegate, sVal));
					}
					s += HtmlLib.TableRowClose();
				}
				s += TotalLine(tot);
				s += HtmlLib.TableClose();
			}
			return s;
		}

		//  To support StatGrid totaling
		private int QuantityOf( string strVal )
		{
			decimal qty = 0;
			if ( !Decimal.TryParse( strVal, out qty ) )
			{
				//  must be n:xx
				//  get first part
				var firstPart = strVal.Substring( 0, strVal.IndexOf( ":" ) );
				if ( !Decimal.TryParse( firstPart, out qty ) )
				{
					qty = 0;
				}
			}
			return (int) qty;
		}

		private string TotalLine(int[] tot)
		{
			var tl = "";

			if (! Totals) return "";

			if (Body != null)
			{
				tl = HtmlLib.TableRowOpen();
				if (DoRowNumbers)
					tl += HtmlLib.TableDataAttr("Totals", "ALIGN='RIGHT' VALIGN='TOP'");

				for (int i = 0; i < _columns.Count; i++)
				{
					var col = (ReportColumn) _columns[i];
					if (col.CanAccumulate)
					{
						var dc = Body.Columns[col.Source];
						var sData = FormatData(dc, col.Format, tot[i].ToString());
						tl += HtmlLib.TableDataAttr(sData, AttrFor(dc, (ReportColumn.ColourDelegate) null, ""));
						LastTotal = tot[i];
					}
					else
						tl += HtmlLib.TableData(HtmlLib.HtmlPad("", 1));
				}
				tl += HtmlLib.TableRowClose();
			}
			return tl;
		}

		private string ColHeaders()
		{
			string headers = "";
			if (_columns != null)
			{
				if (_rowNumbers) headers = HtmlLib.TableHeader("Row");

				headers = _columns.Cast<ReportColumn>().Aggregate(headers,
				                                                  (current, col) => current + HtmlLib.TableHeader(col.Header));
			}
			return headers;
		}

		private static string AttrFor(DataColumn dc, ReportColumn.ColourDelegateFromRole bgColour, string theValue)
		{
			string sAttr = "";
			if (dc != null)
			{
				if (dc.DataType == Type.GetType("System.Decimal") ||
				    dc.DataType == Type.GetType("System.Int32"))
					sAttr = "ALIGN='RIGHT'";
				if (dc.DataType != null && dc.DataType.Equals(Type.GetType("System.String")))
					sAttr = "ALIGN='CENTER'";

				if (bgColour != null)
				{
					if ((!string.IsNullOrEmpty(theValue)))
						sAttr += " BGCOLOR=" + bgColour(theValue);
				}
			}
			return sAttr + " VALIGN='TOP'";
		}

		private static string AttrFor(DataColumn dc, ReportColumn.ColourDelegate bgColour, string theValue)
		{
			string sAttr = "";
			if (dc != null)
			{
				if (dc.DataType == Type.GetType("System.Decimal") ||
				    dc.DataType == Type.GetType("System.Int32"))
					sAttr = "ALIGN='RIGHT'";
				if (dc.DataType != null && dc.DataType.Equals(Type.GetType("System.String")))
					sAttr = "ALIGN='CENTER'";

				if (bgColour != null)
				{
					if ( ( !string.IsNullOrEmpty( theValue ) ) )
					{
						var numberSpot = theValue.IndexOf( ":" );
						if ( numberSpot > -1 )
						{
							var numberPart = theValue.Substring( 0, numberSpot );
							if (numberPart.Equals( "-" ))
								numberPart = theValue.Substring( 0, 2 );
							if ( !string.IsNullOrEmpty( numberPart ) )
								if (!numberPart.Equals( ":" ))
									sAttr += " BGCOLOR=" + bgColour( Int32.Parse( numberPart ) );
						}
					}
				}
			}
			return sAttr + " VALIGN='TOP'";
		}

		private static string FormatData(DataColumn dc, string format, string data)
		{
			var sOut = data;

			if (data != String.Empty)
			{
				if (dc.DataType == Type.GetType("System.Decimal") || dc.DataType == Type.GetType("System.Int32"))
					sOut = Decimal.Parse(data).Equals(-1) ? "--" : string.Format(format, Decimal.Parse(data));
			}
			return sOut;
		}

		private static bool IsEven(int someNumber)
		{
			return someNumber == (someNumber/2*2);
		}

		private static string Header(string cHeading)
		{
			var htmlOut = HtmlLib.TableOpen("class='title' cellpadding='0' cellspacing='0' width='100%'") + "\n\t"
			                 + HtmlLib.TableRowOpen(TopLine()) + "\n\t\t"
			                 + HtmlLib.TableDataAttr(HtmlLib.Bold(cHeading), "colspan='2' class='gponame'") + "\n\t"
			                 + HtmlLib.TableRowClose() + "\n\t"
			                 + HtmlLib.TableRowOpen() + "\n\t\t"
			                 + HtmlLib.TableDataAttr(TopLine(), "id='dtstamp'") + "\n\t\t"
			                 + HtmlLib.TableData(HtmlLib.Div("objshowhide", "tabindex='0'")) + "\n\t"
			                 + HtmlLib.TableRowClose() + "\n"
			                 + HtmlLib.TableClose() + "\n";
			return htmlOut;
		}

		private static string TopLine()
		{
			var theDate = string.Format("Report Date: {0} ", DateTime.Now.ToString("dd MMM yy  HH:mm"));
//			if ( string.IsNullOrEmpty( this.SubHeader ) )
			return theDate;
//			else
//				return string.Format( "{0}&nbsp.&nbsp.&nbsp.&nbsp.&nbsp.&nbsp.&nbsp.&nbsp.&nbsp.&nbsp.&nbsp.{1}", SubHeader, theDate );
		}

		private string Footer()
		{
			var htmlOut = HtmlLib.TableOpen("class='title' cellpadding='0' cellspacing='0'") + "\n\t"
			                 + HtmlLib.TableRowOpen() + "\n\t\t"
			                 + HtmlLib.TableDataAttr(_footer, "colspan='2' class='gponame'") + "\n\t"
			                 + HtmlLib.TableRowClose() + "\n\t";
			if (ShowElapsedTime)
			{
				htmlOut += HtmlLib.TableRowOpen() + "\n\t\t"
				           + HtmlLib.TableDataAttr("elapsed time:" + TimeTaken, "id='dtstamp'") + "\n\t\t"
				           + HtmlLib.TableData(HtmlLib.Div("objshowhide", "tabindex='0'")) + "\n\t"
				           + HtmlLib.TableRowClose() + "\n";
			}
			htmlOut += HtmlLib.TableClose() + "\n";
			return htmlOut;
		}

		#endregion

		#region  CSV Rendition

		public void RenderAsCsv(string fileName)
		{
			var fileOut = string.Format("{0}\\csv\\{1}.csv", Utility.OutputDirectory(), fileName);
			using (var fs = File.Create( fileOut ) )
			using (var sw = new StreamWriter(fs))
				foreach (DataRow dr in _body.Rows)
					sw.WriteLine(CsvLine(dr));

			Utility.Announce( string.Format( "{0} rendered", fileOut ) );
		}


		private string CsvLine(DataRow dr)
		{
			var sb = new StringBuilder();
			foreach (DataColumn col in _body.Columns)
				sb.Append(string.Format("\"{0}\",", dr[col.ColumnName]));

			return sb.ToString();
		}

		#endregion

		#region  Excel rendition

      //public void RenderAsXls(string fileName)
      //{
      //   Excel.Application xlApp;
      //   Excel.Workbook xlWorkBook;
      //   Excel.Worksheet xlWorkSheet;
      //   object misValue = System.Reflection.Missing.Value;

      //   xlApp = new Excel.Application();
      //   xlWorkBook = xlApp.Workbooks.Add(misValue);
      //   xlWorkSheet = (Excel.Worksheet) xlWorkBook.Worksheets.get_Item(1);

      //   int column = 0;
      //   foreach (DataColumn col in _body.Columns)
      //   {
      //      column++;
      //      xlWorkSheet.Cells[1, column] = string.Format("{0}", col.ColumnName);
      //   }
      //   int row = 1;
      //   foreach (DataRow dr in _body.Rows)
      //   {
      //      row++;
      //      column = 0;

      //      foreach (DataColumn col in _body.Columns)
      //      {
      //         column++;
      //         xlWorkSheet.Cells[row, column] = string.Format("{0}", dr[col.ColumnName]);
      //      }
      //   }

      //   RosterLib.Utility.Announce(string.Format("cwd = {0}", ApplicationFolder()));

      //   xlWorkBook.SaveAs(fileName, Excel.XlFileFormat.xlWorkbookNormal,
      //                     misValue, misValue, misValue, misValue, Excel.XlSaveAsAccessMode.xlExclusive,
      //                     misValue, misValue, misValue, misValue, misValue);

      //   xlWorkBook.Close(true, misValue, misValue);
      //   xlApp.Quit();

      //   RosterLib.Utility.Announce(fileName + " created");

      //   releaseObject(xlWorkSheet);
      //   releaseObject(xlWorkBook);
      //   releaseObject(xlApp);
      //}

		public string ApplicationFolder()
		{
			return System.Reflection.Assembly.GetExecutingAssembly().Location.Substring(
				0,
				System.Reflection.Assembly.GetExecutingAssembly().Location.LastIndexOf("\\"));
		}

		#endregion

		#endregion
	}

	//end SimpleTableReport

	#region  Helper classes

	public class ReportColumn
	{
		/// <summary>
		/// The name of the column which would appear in the column header.
		/// </summary>
		public string Header;

		/// <summary>
		/// The name of the field used to populate the column.
		/// </summary>
		public string Source;

		/// <summary>
		/// The formating template for the data.
		/// </summary>
		public string Format;

		public Type Type;

		public delegate string ColourDelegate(int colValue);

		public delegate string ColourDelegateFromRole(string colValue);

		public ReportColumn(string header, string source, string format)
		{
			Header = header;
			Source = source;
			Format = format;
			CanAccumulate = false;
		}

		public ReportColumn(string header, string source, string format, ColourDelegateFromRole colourDelegateIn)
		{
			Header = header;
			Source = source;
			Format = format;
			CanAccumulate = false;
			BackGroundColourDelegateFromRole = colourDelegateIn;
		}

		public ReportColumn(string header, string source, string format, ColourDelegate colourDelegateIn)
		{
			Header = header;
			Source = source;
			Format = format;
			CanAccumulate = false;
			BackGroundColourDelegate = colourDelegateIn;
		}

		public ReportColumn(string header, string source, string format, Type type)
		{
			Header = header;
			Source = source;
			Format = format;
			Type = type;
			CanAccumulate = false;
		}

		public ReportColumn(string header, string source, string format, Type type, bool tally)
		{
			Header = header;
			Source = source;
			Format = format;
			Type = type;
			CanAccumulate = tally;
		}

		public ReportColumn(string header, string source, string format, bool tally)
		{
			Header = header;
			Source = source;
			Format = format;
			CanAccumulate = tally;
		}

		public bool CanAccumulate { get; set; }

		public ColourDelegate BackGroundColourDelegate { get; set; }

		public ColourDelegateFromRole BackGroundColourDelegateFromRole { get; set; }
	}

	#endregion
}

//end namespace 